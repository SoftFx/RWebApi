getwd(0)
getwd()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::use_package("data.table")
devtools::use_package("jsonlite")
devtools::use_package("httr")
install.packages("httr")
install.packages("httr")
devtools::use_package("httr")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
devtools::install_deps(dependencies = TRUE)
devtools::install_deps()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
install.packages("httr")
install.packages("jsonlite")
install.packages("httr")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
devtools::install_deps()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
connection_2 <- ttInitialize(serverName = "ttlivewebapi.fxopen.com", port = "8443")
startTime = as.POSIXct("2018-10-11", tz = "GMT")
endTime = as.POSIXct("2018-10-12", tz = "GMT")
symbols <- connection$GetSymbolsInfo()
library(rTTRatesHistory)
devtools::use_package("httr", "Suggests")
install.packages("httr")
devtools::use_package("httr", "Suggests")
devtools::use_package("data.table", "Suggests")
devtools::use_package("jsonlite", "Suggests")
install.packages("C:/Users/yury.maisiayonak/Work/RPackages/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
startTime = as.POSIXct("2018-10-11", tz = "GMT")
endTime = as.POSIXct("2018-10-12", tz = "GMT")
symbols <- connection$GetSymbolsInfo()
symbols_2 <- connection2$GetSymbolsInfo()
connection_2 <- ttInitialize(serverName = "ttlivewebapi.fxopen.com", port = "8443")
symbols_2 <- connection2$GetSymbolsInfo()
symbols_2 <- connection_2$GetSymbolsInfo()
bars <- connection$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", startTime, endTime)
bars_2 <- connection_2$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", startTime, endTime)
View(bars_2)
symbol = "EURUSD"
startTime = as.POSIXct("2018-12-12")
startTime <- as.double(startTime)*1000
startTime
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
server = ttlivewebapi.fxopen.com
server = "ttlivewebapi.fxopen.com"
port = "8443"
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime)*1000
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
tempStartTime <- startTime
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
querry
server <- paste(serverName, port, sep = ":")
serverName = "ttlivewebapi.fxopen.com"
server <- paste(serverName, port, sep = ":")
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime)*1000
tempStartTime <- startTime
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
querry
startTime = as.POSIXct("2018-12-12")
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
querryInit
system.time(ticks_2 <- connection_2$GetTickHistory("EURUSD", startTime, endTime))
startTime = as.POSIXct("2018-10-11", tz = "GMT")
endTime = as.POSIXct("2018-10-12", tz = "GMT")
system.time(ticks_2 <- connection_2$GetTickHistory("EURUSD", startTime, endTime))
connect <- GET(querry)
nrow(ticks_2) / 166.11
connect
httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6)
connect <- GET(querry)
connect
startTime1 = as.POSIXct("2018-12-10")
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
querryInit
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
tempStartTime <- startTime
history <- data.table()
httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6)
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
connect <- GET(querry)
connect
data <- content(connect, "text", encoding = "UTF-8")
datadata
data
ticks <- fromJSON(data)
ticks$Ticks
ticks <- fromJSON(data)
ticks <- ticks$Ticks
ticks
startTime1 = as.POSIXct("2018-12-10")
endTime1 = as.POSIXct("2018-12-11")
endTime <- as.double(endTime1) * 1000
startTime1 = as.POSIXct("2018-12-10")
endTime1 = as.POSIXct("2018-12-11")
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
serverName = "ttlivewebapi.fxopen.com"
port = "8443"
server = paste(serverName, port, sep = ":")
server
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
symbol = "EURUSD"
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
endTime <- as.double(endTime1) * 1000
tempStartTime <- startTime
history <- data.table()
httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6)
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
querry
connect <- GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- ticks$Ticks
nrow(ticks)
ticks[.N]$Timestamp >= endTime
ticks[.N]$Timestamp
ticks
ticks
ticks <- as.data.table(ticks$Ticks)
ticks[.N]$Timestamp
ticks[.N]
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- as.data.table(ticks$Ticks)
ticks[.N]
ticks <- data.table("Timestamp" = ticks$Timestamp, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- data.table("Timestamp" = ticks$Timestamp, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
ticks
ticks <- fromJSON(data)
ticks <- ticks$Ticks
ticks <- data.table("Timestamp" = ticks$Timestamp, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
View(ticks)
icks[.N]$Timestamp
ticks[.N]$Timestamp
endTime
startTime1 = as.POSIXct("2018-12-10")
endTime1 = as.POSIXct("2018-12-11")
serverName = "ttlivewebapi.fxopen.com"
port = "8443"
server = paste(serverName, port, sep = ":")
symbol = "EURUSD"
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
endTime <- as.double(endTime1) * 1000
tempStartTime <- startTime
history <- data.table()
httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6)
startTime1 = as.POSIXct("2018-12-10")
endTime1 = as.POSIXct("2018-12-11")
serverName = "ttlivewebapi.fxopen.com"
port = "8443"
server = paste(serverName, port, sep = ":")
symbol = "EURUSD"
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
startTime <- as.double(startTime1)*1000
endTime <- as.double(endTime1) * 1000
tempStartTime <- startTime
history <- data.table()
httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6)
repeat{
querry <- paste0(querryInit,"?","timestamp=",tempStartTime,"&count=", 1000)
connect <- GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- ticks$Ticks
ticks <- data.table("Timestamp" = ticks$Timestamp, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
if(nrow(ticks) == 0) {
break;
}else{
if(ticks[.N]$Timestamp >= endTime){
history = rbind(history, ticks[Timestamp <= endTime])
break;
}
}
history <- rbind(history, ticks)
tempStartTime <- history[.N]$Timestamp
# tempStartTime1 = as.POSIXct(tempStartTime/1000, origin = "1970-01-01", tz = "GMT")
}
View(history)
help(package = "rTTRatesHistory")
install.packages("C:/Users/yury.maisiayonak/Work/RPackages/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
connection_2 <- ttInitialize(serverName = "ttlivewebapi.fxopen.com", port = "8443")
startTime = as.POSIXct("2018-10-11", tz = "GMT")
endTime = as.POSIXct("2018-10-12", tz = "GMT")
symbols <- connection$GetSymbolsInfo()
symbols_2 <- connection2$GetSymbolsInfo()
symbols_2 <- connection_2$GetSymbolsInfo()
help(package = "rTTRatesHistory")
install.packages("C:/Users/yury.maisiayonak/Work/RPackages/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
help(package = "rTTRatesHistroy")
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
symbols <- connection$GetSymbolsInfo()
bars <- connection$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", as.Date("2018-10-12"), as.Date("2018-10-13"))
ticks <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
currentQuotes <- connection$GetCurrentQuotes()
install.packages("C:/Users/yury.maisiayonak/Work/RPackages/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
help(package = "rTTRatesHistory")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
symbols <- connection$GetSymbolsInfo()
bars <- connection$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
ticks <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
currentQuotes <- connection$GetCurrentQuotes()
startTime = as.Date("2018-10-12")
startTime <- as.double(startTime)*1000
startTime
as.double(startTime)
startTime <- as.double(startTime)*1000
startTime = as.Date("2018-10-12")
as.double(startTime)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
symbols <- connection$GetSymbolsInfo()
bars <- connection$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
ticks <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
currentQuotes <- connection$GetCurrentQuotes()
