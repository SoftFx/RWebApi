getwd(0)
getwd()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::use_package("data.table")
devtools::use_package("jsonlite")
devtools::use_package("httr")
install.packages("httr")
install.packages("httr")
devtools::use_package("httr")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source", dependencies = TRUE)
devtools::install_deps(dependencies = TRUE)
devtools::install_deps()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
install.packages("httr")
install.packages("jsonlite")
install.packages("httr")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
devtools::install_deps()
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", dependencies = TRUE, repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
GetBars <- function(server, symbol, barsType = "Bid", periodicity = "M1", startTime, endTime, count) {
tempStartTime <- as.double(startTime)*1000
history <- data.table()
maxCount <- 1000
if(count == 0) {
repeat{
bars <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, maxCount)
excludeIndex <-ifelse(is.null(history[.N]$Timestamp), numeric(0), bars[Timestamp==history[.N]$Timestamp,which=T])
if(!is.na(excludeIndex))
bars <-bars[-excludeIndex]
if(nrow(bars) == 0) {
break;
}else{
endTimeInMs <- as.double(endTime) * 1000
if(bars[.N]$Timestamp >= endTimeInMs){
history = rbind(history, bars[Timestamp <= endTimeInMs])
break;
}
}
history <- rbind(history, bars)
tempStartTime <- history[.N]$Timestamp
}
}else{
if(abs(count) < maxCount){
history <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, count)
}else{
history <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, maxCount * sign(count))
}
}
history$Timestamp <- as.POSIXct(history$Timestamp/1000, origin = "1970-01-01", tz = "GMT")
setkey(history, Timestamp)
return(history)
}
GetTicks <- function(server, symbol, startTime, endTime, count) {
tempStartTime <- as.double(startTime)*1000
history <- data.table()
maxCount <- 1000
if(count == 0) {
repeat{
ticks <- GetTicksFromWeb(server, symbol, tempStartTime, maxCount)
excludeIndex <-ifelse(is.null(history[.N]$Timestamp), numeric(0), ticks[Timestamp==history[.N]$Timestamp,which=T])
if(!is.na(excludeIndex))
ticks <-ticks[-excludeIndex]
if(nrow(ticks) == 0) {
break;
}else{
endTimeInMs <- as.double(endTime) * 1000
if(ticks[.N]$Timestamp >= endTimeInMs){
history = rbind(history, ticks[Timestamp <= endTimeInMs])
break;
}
}
history <- rbind(history, ticks)
tempStartTime <- history[.N]$Timestamp
}
}else{
if(abs(count) < maxCount){
history <- GetTicksFromWeb(server, symbol, tempStartTime, count)
}else{
history <- GetTicksFromWeb(server, symbol, tempStartTime, maxCount * sign(count))
}
}
history$Timestamp <- as.POSIXct(history$Timestamp/1000, origin = "1970-01-01", tz = "GMT")
setkey(history, Timestamp)
return(history)
}
GetBidAskBar <- function(server, symbol, periodicity = "M1", startTime, endTime, count) {
bidBars <- GetBars(server, symbol, barsType = "Bid", periodicity, startTime, endTime, count)
askBars <- GetBars(server, symbol, barsType = "Ask", periodicity, startTime, endTime, count)
bidAskBars <- merge(bidBars, askBars)
colnames(bidAskBars) <- c("Timestamp", "BidVolume", "BidClose", "BidLow", "BidHigh", "BidOpen",
"AskVolume", "AskClose", "AskLow", "AskHigh", "AskOpen")
return(bidAskBars)
}
#' Set the server from which the info will be read
#'@param serverName a character. Server
#'@param port a numeric. Port number
#'@examples
#'connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
#'
#'symbols <- connection$GetSymbolsInfo()
#'
#'bars <- connection$GetBarsHistrory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), count = 0)
#'
#'ticks <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), count = 0)
#'
#'currentQuotes <- connection$GetCurrentQuotes()
#'@export
ttInitialize <- function(serverName = "cryptottlivewebapi.xbtce.net", port = "8443"){
options(scipen = 999, digits.secs = 6)
require(data.table)
require(jsonlite)
require(httr)
options(httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6))
options(scipen = 999, digits.secs = 6)
server <- paste(serverName, port, sep = ":")
list(
GetSymbolsInfo = function(){
return(GetSymbolsInfoFromWeb(server))
},
GetCurrentQuotes = function() {
return(GetCurrentQuotesFromWeb(server))
},
GetBarsHistory = function(symbol, barsType = "Bid", periodicity = "M1", startTime, endTime, count = 0){
if(barsType == "BidAsk"){
return(GetBidAskBar(server, symbol, periodicity, startTime, endTime, count))
}
if(barsType == "Bid" | barsType == "Ask"){
return(GetBars(server, symbol, barsType, periodicity, startTime, endTime, count))
}
stop("Wrong barsType")
},
GetTickHistory = function(symbol, startTime, endTime, count = 0) {
return(GetTicks(server, symbol, startTime, count))
}
)
}
GetBarFromWeb <- function(server, symbol, barsType, periodicity, startTimeMs, count){
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, periodicity, "bars", barsType, sep= "/")
querry <- paste0(querryInit,"?","timestamp=",startTimeMs,"&count=", count)
connect <- GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data <- content(connect, "text", encoding = "UTF-8")
bars <- fromJSON(data)
bars <- as.data.table(bars$Bars)
return(bars)
}
GetTicksFromWeb <- function(server, symbol, startTimeMs, count){
querryInit <- paste("https://", server,"/api/v1/public/quotehistory",symbol, "ticks", sep= "/")
querry <- paste0(querryInit,"?","timestamp=",startTimeMs,"&count=", count)
connect <- httr::GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- ticks$Ticks
ticks <- data.table("Timestamp" = ticks$Timestamp, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
return(ticks)
}
GetSymbolsInfoFromWeb <- function(server){
querry = paste0("https://", server, "/api/v1/public/symbol")
connect = httr::GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data = content(connect, "text", encoding = "UTF-8")
data = fromJSON(data)
symbols <- as.data.table(data)
setkey(symbols, "Symbol")
return(symbols)
}
GetCurrentQuotesFromWeb <- function(server) {
querry <-  paste0("https://", server,"/api/v1/public/tick")
connect <- httr::GET(querry)
if(connect$status_code != 200) {
stop(paste("status_code is not OK", connect$status_code))
}
data <- content(connect, "text", encoding = "UTF-8")
ticks <- fromJSON(data)
ticks <- data.table("TimeStamp" = ticks$Timestamp, "Symbol" = ticks$Symbol, "BidPrice" = ticks$BestBid$Price,
"BidVolume" = ticks$BestBid$Volume, "BidType" = ticks$BestBid$Type,  "AskPrice" = ticks$BestAsk$Price,
"AskVolume" = ticks$BestAsk$Volume, "AskType" = ticks$BestAsk$Type)
setkey(ticks, Symbol)
return(ticks)
}
serverName = "cryptottlivewebapi.xbtce.net"
port = "8443"
server <- paste(serverName, port, sep = ":")
GetBars(server, "EURUSD, "Bid", "M1" )
GetBars(server, "EURUSD", "Bid", "M1", as.POSIXct("2018-12-10"), as.POSIXct("2018-12-11"))
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yury.maisiayonak/Desktop/TTWebClient-R/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yury.maisiayonak/Desktop/TTWebClient-R/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
library(rTTRatesHistory)
connection <- ttInitialize(serverName = "cryptottlivewebapi.xbtce.net", port = "8443")
symbols <- connection$GetSymbolsInfo()
bars <- connection$GetBarsHistory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
bar_1 <- connection$GetBarsHistory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), 300)
bar_2 <- connection$GetBarsHistory("BTCUSD", barsType = "Bid", periodicity = "M1", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), -300)
ticks <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"))
ticks_1 <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), 300)
ticks_2 <- connection$GetTickHistory("BTCUSD", as.POSIXct("2018-10-12 00:00:00", tz = "GMT"), as.POSIXct("2018-10-12 05:00:00", tz = "GMT"), -300)
currentQuotes <- connection$GetCurrentQuotes()
View(currentQuotes)
install.packages("C:/Users/yury.maisiayonak/Desktop/TTWebClient-R/rTTRatesHistory_0.1.0.tar.gz", repos = NULL, type = "source")
