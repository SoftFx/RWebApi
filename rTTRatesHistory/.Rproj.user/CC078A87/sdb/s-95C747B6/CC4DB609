{
    "collab_server" : "",
    "contents" : "\nGetBars <- function(server, symbol, barsType = \"Bid\", periodicity = \"M1\", startTime, endTime, count) {\n  tempStartTime <- as.double(startTime)*1000\n  history <- data.table()\n  maxCount <- 1000\n  if(count == 0) {\n    repeat{\n      bars <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, maxCount)\n      excludeIndex <-ifelse(is.null(history[.N]$Timestamp), numeric(0), bars[Timestamp==history[.N]$Timestamp,which=T])\n      if(!is.na(excludeIndex))\n        bars <-bars[-excludeIndex]\n      if(nrow(bars) == 0) {\n        break;\n      }else{\n        endTimeInMs <- as.double(endTime) * 1000\n        if(bars[.N]$Timestamp >= endTimeInMs){\n          history = rbind(history, bars[Timestamp <= endTimeInMs])\n          break;\n        }\n      }\n      history <- rbind(history, bars)\n      tempStartTime <- history[.N]$Timestamp\n    }\n  }else{\n    if(abs(count) < maxCount){\n      history <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, count)\n    }else{\n      history <- GetBarFromWeb(server, symbol, barsType, periodicity, tempStartTime, maxCount * sign(count))\n    }\n  }\n  history$Timestamp <- as.POSIXct(history$Timestamp/1000, origin = \"1970-01-01\", tz = \"GMT\")\n  setkey(history, Timestamp)\n  return(history)\n}\n\nGetTicks <- function(server, symbol, startTime, endTime, count) {\n  tempStartTime <- as.double(startTime)*1000\n  history <- data.table()\n  maxCount <- 1000\n  if(count == 0) {\n    repeat{\n      ticks <- GetTicksFromWeb(server, symbol, tempStartTime, maxCount)\n      excludeIndex <-ifelse(is.null(history[.N]$Timestamp), numeric(0), ticks[Timestamp==history[.N]$Timestamp,which=T])\n      if(!is.na(excludeIndex))\n        ticks <-ticks[-excludeIndex]\n      if(nrow(ticks) == 0) {\n        break;\n      }else{\n        endTimeInMs <- as.double(endTime) * 1000\n        if(ticks[.N]$Timestamp >= endTimeInMs){\n          history = rbind(history, ticks[Timestamp <= endTimeInMs])\n          break;\n        }\n      }\n      history <- rbind(history, ticks)\n      tempStartTime <- history[.N]$Timestamp\n    }\n  }else{\n    if(abs(count) < maxCount){\n      history <- GetTicksFromWeb(server, symbol, tempStartTime, count)\n    }else{\n      history <- GetTicksFromWeb(server, symbol, tempStartTime, maxCount * sign(count))\n    }\n  }\n  history$Timestamp <- as.POSIXct(history$Timestamp/1000, origin = \"1970-01-01\", tz = \"GMT\")\n  setkey(history, Timestamp)\n  return(history)\n}\n\nGetBidAskBar <- function(server, symbol, periodicity = \"M1\", startTime, endTime, count) {\n  bidBars <- GetBars(server, symbol, barsType = \"Bid\", periodicity, startTime, endTime, count)\n  askBars <- GetBars(server, symbol, barsType = \"Ask\", periodicity, startTime, endTime, count)\n  bidAskBars <- merge(bidBars, askBars)\n  colnames(bidAskBars) <- c(\"Timestamp\", \"BidVolume\", \"BidClose\", \"BidLow\", \"BidHigh\", \"BidOpen\",\n                            \"AskVolume\", \"AskClose\", \"AskLow\", \"AskHigh\", \"AskOpen\")\n  return(bidAskBars)\n}\n\n#' Set the server from which the info will be read\n#'@param serverName a character. Server\n#'@param port a numeric. Port number\n#'@examples\n#'connection <- ttInitialize(serverName = \"cryptottlivewebapi.xbtce.net\", port = \"8443\")\n#'\n#'symbols <- connection$GetSymbolsInfo()\n#'\n#'bars <- connection$GetBarsHistrory(\"BTCUSD\", barsType = \"Bid\", periodicity = \"M1\", as.POSIXct(\"2018-10-12 00:00:00\", tz = \"GMT\"), as.POSIXct(\"2018-10-12 05:00:00\", tz = \"GMT\"), count = 0)\n#'\n#'ticks <- connection$GetTickHistory(\"BTCUSD\", as.POSIXct(\"2018-10-12 00:00:00\", tz = \"GMT\"), as.POSIXct(\"2018-10-12 05:00:00\", tz = \"GMT\"), count = 0)\n#'\n#'currentQuotes <- connection$GetCurrentQuotes()\n#'@export\nttInitialize <- function(serverName = \"cryptottlivewebapi.xbtce.net\", port = \"8443\"){\n  options(scipen = 999, digits.secs = 6)\n  require(data.table)\n  require(jsonlite)\n  require(httr)\n  options(httr::config(ssl_verifypeer = 0L, ssl_verifyhost = 0L, verbose = FALSE, sslversion = 6))\n  options(scipen = 999, digits.secs = 6)\n\n  server <- paste(serverName, port, sep = \":\")\n  list(\n    GetSymbolsInfo = function(){\n      return(GetSymbolsInfoFromWeb(server))\n    },\n    GetCurrentQuotes = function() {\n      return(GetCurrentQuotesFromWeb(server))\n    },\n    GetBarsHistory = function(symbol, barsType = \"Bid\", periodicity = \"M1\", startTime, endTime, count = 0){\n      if(barsType == \"BidAsk\"){\n        return(GetBidAskBar(server, symbol, periodicity, startTime, endTime, count))\n      }\n      if(barsType == \"Bid\" | barsType == \"Ask\"){\n        return(GetBars(server, symbol, barsType, periodicity, startTime, endTime, count))\n      }\n      stop(\"Wrong barsType\")\n    },\n    GetTickHistory = function(symbol, startTime, endTime, count = 0) {\n      return(GetTicks(server, symbol, startTime, endTime, count))\n    }\n  )\n}\n",
    "created" : 1544630494637.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2679294859",
    "id" : "CC4DB609",
    "lastKnownWriteTime" : 1545406807,
    "last_content_update" : 1545406807386,
    "path" : "~/rTTRatesHistory/R/rTTRatesHistory.R",
    "project_path" : "R/rTTRatesHistory.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}